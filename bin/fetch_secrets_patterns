#!/usr/bin/env ruby

require 'json'
require 'fileutils'

# Script to fetch secrets patterns from GitLab gem's TOML ruleset
class SecretsPatternsFetcher
  PATTERNS_DIR = File.join(File.dirname(__dir__), 'lib', 'secrets_patterns')
  
  def initialize
    FileUtils.mkdir_p(PATTERNS_DIR)
  end
  
  def fetch_patterns
    puts "Extracting secrets patterns from installed GitLab gem..."
    
    # Find the GitLab gem installation
    gitlab_toml_path = find_gitlab_toml_file
    
    unless gitlab_toml_path
      puts "Error: Could not find GitLab secret detection TOML file"
      puts "Make sure gitlab-secret_detection gem is installed: gem install gitlab-secret_detection"
      exit 1
    end
    
    puts "Found GitLab TOML file: #{gitlab_toml_path}"
    
    # Copy the TOML file
    toml_content = File.read(gitlab_toml_path)
    toml_path = File.join(PATTERNS_DIR, 'secret_push_protection_rules.toml')
    File.write(toml_path, toml_content)
    
    puts "Copied TOML file to #{toml_path}"
    
    # Parse TOML and convert to simpler JSON format
    patterns = parse_toml_patterns(toml_content)
    json_path = File.join(PATTERNS_DIR, 'patterns.json')
    File.write(json_path, JSON.pretty_generate(patterns))
    
    puts "Converted #{patterns['rules'].length} patterns to #{json_path}"
    
    create_index_file
  end
  
  private
  
  def find_gitlab_toml_file
    # Look for the GitLab secret detection gem in common gem paths
    gem_paths = []
    
    # Try rbenv path
    if ENV['RBENV_ROOT']
      gem_paths << File.join(ENV['RBENV_ROOT'], 'versions', '*', 'lib', 'ruby', 'gems', '*', 'gems', 'gitlab-secret_detection-*')
    end
    
    # Try system gem paths
    gem_paths << File.join(ENV['HOME'], '.rbenv', 'versions', '*', 'lib', 'ruby', 'gems', '*', 'gems', 'gitlab-secret_detection-*')
    gem_paths << '/usr/local/lib/ruby/gems/*/gems/gitlab-secret_detection-*'
    gem_paths << '/var/lib/gems/*/gems/gitlab-secret_detection-*'
    
    gem_paths.each do |pattern|
      Dir.glob(pattern).each do |gem_dir|
        toml_path = File.join(gem_dir, 'lib', 'gitlab', 'secret_detection', 'core', 'secret_push_protection_rules.toml')
        return toml_path if File.exist?(toml_path)
      end
    end
    
    nil
  end
  
  def parse_toml_patterns(toml_content)
    patterns = {
      'source' => 'GitLab gem gitleaks.toml',
      'updated_at' => Time.now.iso8601,
      'rules' => []
    }
    
    # Simple TOML parser for [[rules]] sections
    current_rule = nil
    
    toml_content.each_line do |line|
      line = line.strip
      
      if line.start_with?('[[rules]]')
        # Save previous rule if it exists
        if current_rule && current_rule['regex'] && current_rule['id']
          patterns['rules'] << current_rule
        end
        current_rule = {}
      elsif line.start_with?('id = ')
        current_rule['id'] = extract_quoted_value(line) if current_rule
      elsif line.start_with?('description = ')
        current_rule['description'] = extract_quoted_value(line) if current_rule
      elsif line.start_with?('regex = ')
        current_rule['regex'] = extract_quoted_value(line) if current_rule
      elsif line.start_with?('keywords = ')
        current_rule['keywords'] = extract_array_value(line) if current_rule
      end
    end
    
    # Don't forget the last rule
    if current_rule && current_rule['regex'] && current_rule['id']
      patterns['rules'] << current_rule
    end
    
    patterns
  end
  
  def extract_quoted_value(line)
    # Extract value from lines like: key = "value" or key = 'value'
    match = line.match(/=\s*["'](.*)["']/)
    match ? match[1] : nil
  end
  
  def extract_array_value(line)
    # Extract array from lines like: keywords = ["key1", "key2"]
    match = line.match(/=\s*\[(.*)\]/)
    return [] unless match
    
    array_content = match[1]
    # Simple extraction of quoted strings
    array_content.scan(/"([^"]*)"/).flatten
  end
  
  def create_index_file
    index = {
      'updated_at' => Time.now.iso8601,
      'source' => 'GitLab gem secret_push_protection_rules.toml',
      'files' => ['secret_push_protection_rules.toml', 'patterns.json']
    }
    
    index_path = File.join(PATTERNS_DIR, 'index.json')
    File.write(index_path, JSON.pretty_generate(index))
    puts "Created index file: #{index_path}"
  end
end

if __FILE__ == $0
  fetcher = SecretsPatternsFetcher.new
  fetcher.fetch_patterns
end